{"version":3,"sources":["components/layout/Header.js","components/TodoItem.js","components/Todos.js","components/pages/About.js","components/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["headerStyle","background","color","textAlign","padding","linkStyle","textDecoration","Header","style","to","TodoItem","getStyle","borderBottom","props","todo","completed","this","id","title","inputStyle","type","onChange","markComplete","bind","btnStyle","onClick","delTodo","Component","prototypes","PropTypes","object","isRequired","borderRadius","cursor","float","margin","display","Todos","todos","map","key","array","aboutStyle","backgroundColor","About","Fragment","AddTodo","state","e","setState","target","name","value","onSubmit","preventDefault","addTodo","flex","marginRight","marginBottom","placeholder","App","uuid","filter","newTodo","className","exact","path","render","component","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAgBA,IAAMA,EAAc,CAChBC,WAAY,kBACZC,MAAO,OACPC,UAAW,SACXC,QAAS,QAGLC,EAAY,CAChBH,MAAO,OACPI,eAAgB,QAGLC,EAzBf,WACI,OACI,6BACI,4BAAQC,MAAOR,GACX,gDACA,kBAAC,IAAD,CAAMQ,MAAOH,EAAWI,GAAG,KAA3B,QAFJ,MAEkD,IAC9C,kBAAC,IAAD,CAAMD,MAAOH,EAAWI,GAAG,UAA3B,Y,gBCNHC,EAAb,4MACIC,SAAW,WACP,MAAO,CACHV,WAAY,UACZG,QAAS,OACTQ,aAAc,kBACdN,eAAgB,EAAKO,MAAMC,KAAKC,UAAY,eAAiB,SANzE,uDAWc,IAAD,EACiBC,KAAKH,MAAMC,KAAzBG,EADH,EACGA,GAAIC,EADP,EACOA,MAEZ,OACI,yBAAKV,MAAOQ,KAAKL,YACb,2BACI,2BAAOH,MAAOW,EAAYC,KAAO,WAAWC,SAAUL,KAAKH,MAAMS,aAAaC,KAAKP,KAAMC,KACxF,KACCC,EACF,4BAAQV,MAAOgB,EAAUC,QAAST,KAAKH,MAAMa,QAAQH,KAAKP,KAAKC,IAA/D,WApBpB,GAA8BU,aA4B9BjB,EAASkB,WAAa,CAClBd,KAAMe,IAAUC,OAAOC,YAG3B,IAAMP,EAAW,CACbvB,WAAY,UACZC,MAAO,OACPE,QAAS,UACT4B,aAAc,MACdC,OAAQ,UACRC,MAAO,SAGLf,EAAa,CACff,QAAS,YACT+B,OAAQ,WACRF,OAAQ,UACRG,QAAS,YAGE1B,IC9CT2B,E,uKAEM,IAAD,OACP,OAAOrB,KAAKH,MAAMyB,MAAMC,KAAK,SAACzB,GAAD,OACzB,kBAAC,EAAD,CAAU0B,IAAK1B,EAAKG,GAAIH,KAAMA,EAAMQ,aAAgB,EAAKT,MAAMS,aAAcI,QAAS,EAAKb,MAAMa,iB,GAJrFC,aAUpBU,EAAMT,WAAa,CACfU,MAAOT,IAAUY,MAAMV,YAGZM,QCJf,IAAMK,EAAa,CACjBC,gBAAiB,cACjBzC,MAAO,QACPC,UAAW,UAGEyC,EAnBf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKrC,MAAOkC,GACV,qCACA,oEACA,6BACA,6D,QCwCOI,EA/Cf,4MACIC,MAAO,CACH7B,MAAO,IAFf,EAMIG,SAAW,SAAC2B,GACR,EAAKC,SAAL,eAAiBD,EAAEE,OAAOC,KAAOH,EAAEE,OAAOE,SAPlD,EAUIC,SAAW,SAACL,GACRA,EAAEM,iBACF,EAAKzC,MAAM0C,QAAQ,EAAKR,MAAM7B,OAC9B,EAAK+B,SAAS,CAAE/B,MAAO,MAb/B,uDAiBI,OACE,0BAAMmC,SAAUrC,KAAKqC,SAAU7C,MAAO,CAAE4B,QAAS,SAC/C,2BACEhB,KAAK,OACLZ,MAAO,CACLgD,KAAM,IACNpD,QAAS,OACTqD,YAAa,MACbC,aAAc,OAEhBP,KAAK,QACLQ,YAAY,iBACZP,MAAOpC,KAAK+B,MAAM7B,MAClBG,SAAUL,KAAKK,WAGjB,2BACED,KAAK,SACLgC,MAAM,MACN5C,MAAO,CACLgD,KAAM,IACNvB,OAAQ,UACRyB,aAAc,cAvC1B,GAA6B/B,aCkFdiC,E,4MA1Ebb,MAAQ,CACNT,MAAO,CACL,CACErB,GAAI4C,cACJ3C,MAAO,gEACPH,WAAW,GAEb,CACEE,GAAI4C,cACJ3C,MAAO,yBACPH,WAAW,GAEb,CACEE,GAAI4C,cACJ3C,MAAO,qEACPH,WAAW,K,EAMjBO,aAAe,SAACL,GACd,EAAKgC,SAAS,CACZX,MAAO,EAAKS,MAAMT,MAAMC,KAAI,SAACzB,GAI3B,OAHIA,EAAKG,KAAOA,IACdH,EAAKC,WAAaD,EAAKC,WAElBD,Q,EAMbY,QAAU,SAACT,GACT,EAAKgC,SAAS,CACZX,MAAM,YAAK,EAAKS,MAAMT,MAAMwB,QAAO,SAAChD,GAAD,OAAUA,EAAKG,KAAOA,S,EAK7DsC,QAAU,SAACrC,GACT,IAAM6C,EAAU,CACd9C,GAAI4C,cACJ3C,QACAH,WAAW,GAEb,EAAKkC,SAAS,CAAEX,MAAM,GAAD,mBAAM,EAAKS,MAAMT,OAAjB,CAAwByB,O,uDAGrC,IAAD,OACP,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAACtD,GAAD,OAC1B,kBAAC,IAAMgC,SAAP,KACE,kBAAC,EAAD,CAASU,QAAS,EAAKA,UACvB,kBAAC,EAAD,CACEjB,MAAO,EAAKS,MAAMT,MAClBhB,aAAc,EAAKA,aACnBI,QAAS,EAAKA,cAKtB,kBAAC,IAAD,CAAOwC,KAAK,SAASE,UAAWxB,W,GAnE1BjB,aCGE0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASP,OACP,kBAAC,IAAMQ,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d6c95cf0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Header() {\r\n    return (\r\n        <div>\r\n            <header style={headerStyle}>\r\n                <h1>DS BrainStorming</h1>\r\n                <Link style={linkStyle} to=\"/\">Home</Link> | {' '}\r\n                <Link style={linkStyle} to=\"/about\">About</Link>\r\n            </header>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst headerStyle = {\r\n    background: 'rgb(85, 78, 79)',\r\n    color: '#fff',\r\n    textAlign: 'center',\r\n    padding: '10px'\r\n  }\r\n  \r\n  const linkStyle = {\r\n    color: '#fff',\r\n    textDecoration: 'none'\r\n  }\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport class TodoItem extends Component {\r\n    getStyle = () => {\r\n        return {\r\n            background: '#f4f4f4',\r\n            padding: '10px',\r\n            borderBottom: '1px #ccc dotted',\r\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\r\n        } \r\n    }\r\n\r\n\r\n    render() {\r\n        const { id, title } = this.props.todo;\r\n\r\n        return (\r\n            <div style={this.getStyle()}>\r\n                <p> \r\n                    <input style={inputStyle} type = \"checkbox\" onChange={this.props.markComplete.bind(this, id)} /> \r\n                    {'  '}\r\n                    { title }\r\n                    <button style={btnStyle} onClick={this.props.delTodo.bind(this,id)}>x</button>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n//propTypes\r\nTodoItem.prototypes = {\r\n    todo: PropTypes.object.isRequired\r\n}\r\n\r\nconst btnStyle = {\r\n    background: '#ff0000',\r\n    color: '#fff',\r\n    padding: '5px 8px',\r\n    borderRadius: '50%',\r\n    cursor: 'pointer',\r\n    float: 'right'\r\n}\r\n\r\nconst inputStyle = {\r\n    padding: '10px 10px',\r\n    margin: '2px 20px',\r\n    cursor: 'pointer',\r\n    display: 'absolute'\r\n}\r\n\r\nexport default TodoItem;\r\n","import React, { Component } from 'react';\r\nimport TodoItem from './TodoItem';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nclass Todos extends Component {\r\n\r\n  render() {\r\n    return this.props.todos.map( (todo) => (\r\n        <TodoItem key={todo.id} todo={todo} markComplete = {this.props.markComplete} delTodo={this.props.delTodo}/>\r\n    ));\r\n  }\r\n}\r\n\r\n//propTypes\r\nTodos.prototypes = {\r\n    todos: PropTypes.array.isRequired\r\n}\r\n\r\nexport default Todos;","import React from \"react\";\r\n\r\nfunction About() {\r\n  return (\r\n    <React.Fragment>\r\n      <div style={aboutStyle}>\r\n        <h1>About</h1>\r\n        <p>This is the BrainStorming App. V1.0.0</p>\r\n        <br/>\r\n        <p>This is a React Application</p>\r\n      </div>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nconst aboutStyle = {\r\n  backgroundColor: 'transparent',\r\n  color: 'white',\r\n  textAlign: 'center'\r\n};\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\r\n\r\nexport class AddTodo extends Component {\r\n    state ={\r\n        title: ''\r\n    }\r\n\r\n    //you can use this as many time as you want with different inputs\r\n    onChange = (e) => {\r\n        this.setState({ [e.target.name]: e.target.value });\r\n    }\r\n\r\n    onSubmit = (e) => {\r\n        e.preventDefault(); //this will not submit into a file (submitting into file is the default)\r\n        this.props.addTodo(this.state.title);\r\n        this.setState({ title: '' }); //this is for clearing the field after submission\r\n      }\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={this.onSubmit} style={{ display: \"flex\" }}>\r\n        <input\r\n          type=\"text\"\r\n          style={{\r\n            flex: \"5\",\r\n            padding: \"15px\",\r\n            marginRight: \"5px\",\r\n            marginBottom: \"4px\",\r\n          }}\r\n          name=\"title\"\r\n          placeholder=\"Add a task ...\"\r\n          value={this.state.title}\r\n          onChange={this.onChange}\r\n        />\r\n\r\n        <input\r\n          type=\"submit\"\r\n          value=\"Add\"\r\n          style={{\r\n            flex: \"1\",\r\n            cursor: \"pointer\",\r\n            marginBottom: \"4px\",\r\n          }}\r\n        />\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AddTodo;\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport { v4 as uuid } from \"uuid\";\nimport Header from \"./components/layout/Header\";\nimport Todos from \"./components/Todos\";\nimport About from \"./components/pages/About\";\nimport AddTodo from \"./components/AddTodo\";\n\nclass App extends Component {\n  state = {\n    todos: [\n      {\n        id: uuid(),\n        title: \"You can Delete this task anytime by Clicking the red x button\",\n        completed: false,\n      },\n      {\n        id: uuid(),\n        title: \"You can add a new task\",\n        completed: false,\n      },\n      {\n        id: uuid(),\n        title: \"You can mark this task as completed by Clicking the left check box\",\n        completed: false,\n      },\n    ],\n  };\n\n  //Toggle complete\n  markComplete = (id) => {\n    this.setState({\n      todos: this.state.todos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      }),\n    });\n  };\n\n  //delete a todo\n  delTodo = (id) => {\n    this.setState({\n      todos: [...this.state.todos.filter((todo) => todo.id !== id)],\n    });\n  };\n\n  //Adding a task\n  addTodo = (title) => {\n    const newTodo = {\n      id: uuid(),\n      title,\n      completed: false,\n    };\n    this.setState({ todos: [...this.state.todos, newTodo] });\n  };\n\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header />\n            <Route exact path=\"/\" render={(props) => (\n                <React.Fragment>\n                  <AddTodo addTodo={this.addTodo} />\n                  <Todos\n                    todos={this.state.todos}\n                    markComplete={this.markComplete}\n                    delTodo={this.delTodo}\n                  />\n                </React.Fragment>\n              )}\n            />\n            <Route path=\"/about\" component={About} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}